version: '3.8'

services:
  # PostgreSQL Database - same as production
  db:
    build: 
      context: ./database
      dockerfile: Dockerfile
    container_name: bank-app-db-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=bankApp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data-dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bank-network-dev
    restart: unless-stopped

  # Spring Boot Backend - with dev mode
  backend:
    image: maven:3.8.4-openjdk-17
    container_name: bank-app-backend-dev
    working_dir: /app
    command: mvn spring-boot:run
    ports:
      - "8080:8080"
      - "5005:5005" # For remote debugging
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/bankApp
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    volumes:
      - ./:/app
      - maven-repo:/root/.m2
    depends_on:
      db:
        condition: service_healthy
    networks:
      - bank-network-dev
    restart: unless-stopped

  # Angular Frontend - with dev server
  frontend:
    image: node:16
    container_name: bank-app-frontend-dev
    working_dir: /app
    command: sh -c "npm install && npm start -- --host 0.0.0.0 --disable-host-check"
    ports:
      - "4200:4200"
    volumes:
      - ./bank-app-frontend:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - bank-network-dev
    restart: unless-stopped

networks:
  bank-network-dev:
    driver: bridge

volumes:
  postgres-data-dev:
  maven-repo:
  node_modules: 